{"ast":null,"code":"var _jsxFileName = \"/Users/cmaur/Desktop/Software Engineering/boggle-react-app/src/App.js\";\nimport React, { useState } from 'react';\nimport BoggleSolver from './Boggle Implementation/boggle_solver'; // import StartButton from './StartButton';\n// import StopButton from './StopButton';\n\nimport { Grid, Button, TextField, Input } from '@material-ui/core';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport TextInput from './AnswerInput';\nconst gridItems1 = {\n  0: {\n    size: 3,\n    label: \"O\"\n  },\n  1: {\n    size: 3,\n    label: \"I\"\n  },\n  2: {\n    size: 3,\n    label: \"H\"\n  }\n};\nconst gridItems2 = {\n  0: {\n    size: 3,\n    label: \"V\"\n  },\n  1: {\n    size: 3,\n    label: \"O\"\n  },\n  2: {\n    size: 3,\n    label: \"D\"\n  }\n};\nconst gridItems3 = {\n  0: {\n    size: 3,\n    label: \"U\"\n  },\n  1: {\n    size: 3,\n    label: \"S\"\n  },\n  2: {\n    size: 3,\n    label: \"O\"\n  }\n};\nvar validAnswers = [];\n\nconst findAllSolutions = require(\"./Boggle Implementation/boggle_solver\");\n\nasync function getUserInput({\n  promptText\n}) {\n  var value = \"\"; // const [text, setText] = useState(\"no text set\");\n\n  const promptResoponse = prompt(promptText);\n  console.log(promptResoponse); // setText(promptResoponse);\n\n  let solutions = findAllSolutions.findAllSolutions(this.state.grids[0].grid,\n  /* lines 44 - 48 are the dictionary*/\n  [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\", \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\", \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\", \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\", \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"]);\n  solutions.forEach(word => {\n    if (word === promptResoponse) {\n      console.log(\"true\");\n      value = promptResoponse;\n      console.log(value);\n    }\n  });\n  return value;\n}\n\nasync function setGrid() {}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startState: false,\n      answers: validAnswers,\n      word: '',\n      correct: [],\n      grids: []\n    };\n    this.ref = firebase.firestore();\n  }\n\n  async componentDidMount() {\n    this.unsubscribe = this.ref.collection('3x3').onSnapshot(querySnapshot => {\n      var gridArray = [];\n      querySnapshot.forEach(doc => {\n        gridArray.push({\n          grid: doc.data().grid,\n          dictionary: doc.data().dictionary\n        });\n      });\n      console.log(gridArray[0].grid);\n      this.setState({\n        grids: gridArray\n      });\n      this.unsubscribe();\n    });\n    let solutions = findAllSolutions.findAllSolutions(this.state.grids,\n    /* lines 77 - 81 are the dictionary*/\n    [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\", \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\", \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\", \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\", \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"]);\n    await solutions.forEach(answer => {\n      validAnswers.push(answer + \" :\");\n    });\n    console.log(this.state.answers);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      as: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \"Boggle Game\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 42\n      }\n    }, \"Valid Answers\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 42\n      }\n    }, this.state.answers), this.state.state === true && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 41\n      }\n    }, \"Correct Answers\"), this.state.state === true && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 41\n      }\n    }, this.state.correct), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 42\n      }\n    }, \"Your Correct Answers\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 42\n      }\n    }, this.state.correct), this.state.state === true && /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems1).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems1[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 19\n        }\n      }, gridItems1[rowKey].label);\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems2).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems2[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 19\n        }\n      }, gridItems2[rowKey].label);\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems3).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems3[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, gridItems3[rowKey].label);\n    }))), this.state.state === true && /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"white\",\n      prompt: \"Enter Word\",\n      onClick: () => {\n        getUserInput(prompt, this.state.grids[0].grid, this.state.grids[0].dictionary).then(function (result) {\n          console.log(\"Returned\");\n          console.log(result);\n          return result;\n        }).then(value => {\n          if (!this.state.correct.includes(value + \" \") && value != \"\") {\n            this.state.correct.push(value + \" \");\n            this.setState({\n              correct: this.state.correct\n            });\n            console.log(\"STATE:\" + this.state.correct);\n          } else if (value == \"\") {\n            alert(\"This word is not in the dictionary. Please enter another word\");\n          } else {\n            alert(\"You have already found this word. Please enter another word\");\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 41\n      }\n    }, \"Enter Word\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => {\n        console.log(\"Pressed\");\n        console.log(this.state.grids[0].grid);\n        this.setState({\n          state: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, \" Start \"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => {\n        console.log(\"Pressed\");\n        this.setState({\n          state: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, \" Stop \")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cmaur/Desktop/Software Engineering/boggle-react-app/src/App.js"],"names":["React","useState","BoggleSolver","Grid","Button","TextField","Input","firebase","TextInput","gridItems1","size","label","gridItems2","gridItems3","validAnswers","findAllSolutions","require","getUserInput","promptText","value","promptResoponse","prompt","console","log","solutions","state","grids","grid","forEach","word","setGrid","App","Component","constructor","props","startState","answers","correct","ref","firestore","componentDidMount","unsubscribe","collection","onSnapshot","querySnapshot","gridArray","doc","push","data","dictionary","setState","answer","render","Object","keys","map","rowKey","then","result","includes","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport BoggleSolver from './Boggle Implementation/boggle_solver';\n// import StartButton from './StartButton';\n// import StopButton from './StopButton';\nimport { Grid, Button, TextField, Input } from '@material-ui/core';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport TextInput from './AnswerInput';\n\nconst gridItems1 = {\n  0: { size: 3, label: \"O\" },\n  1: { size: 3, label: \"I\" },\n  2: { size: 3, label: \"H\" },\n}\n\nconst gridItems2 = {\n  0: { size: 3, label: \"V\" },\n  1: { size: 3, label: \"O\" },\n  2: { size: 3, label: \"D\" },\n}\n\nconst gridItems3 = {\n  0: { size: 3, label: \"U\" },\n  1: { size: 3, label: \"S\" },\n  2: { size: 3, label: \"O\" },\n}\n\n\n\nvar validAnswers = [];\n\nconst findAllSolutions = require(\"./Boggle Implementation/boggle_solver\");\n\n\nasync function getUserInput({ promptText }) {\n\n  var value = \"\";\n  // const [text, setText] = useState(\"no text set\");\n  const promptResoponse = prompt(promptText)\n  console.log(promptResoponse);\n  // setText(promptResoponse);\n\n  \n  let solutions = findAllSolutions.findAllSolutions(this.state.grids[0].grid,\n\n  /* lines 44 - 48 are the dictionary*/             [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\",\n                                                    \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\",\n                                                    \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\",\n                                                    \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\",\n                                                    \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"])\n\n  solutions.forEach(word => {\n    if (word === promptResoponse) {\n      console.log(\"true\")\n      value = promptResoponse;\n      console.log(value)\n    }\n  })\n  return value;\n}\n\nasync function setGrid() {\n\n}\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startState: false,\n      answers: validAnswers,\n      word: '',\n      correct: [],\n      grids: [],\n    }\n    this.ref = firebase.firestore();\n  }\n\n  async componentDidMount() {\n    \n   this.unsubscribe = this.ref.collection('3x3').onSnapshot((querySnapshot) => {\n     var gridArray = [];\n     querySnapshot.forEach((doc) => {\n       gridArray.push({\n         grid: doc.data().grid,\n         dictionary: doc.data().dictionary,\n       })\n     })\n     console.log(gridArray[0].grid);\n     this.setState({\n       grids: gridArray,\n     })\n\n     this.unsubscribe();\n   })\n\n    let solutions = findAllSolutions.findAllSolutions(this.state.grids,\n\n    /* lines 77 - 81 are the dictionary*/             [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\",\n                                                      \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\",\n                                                      \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\",\n                                                      \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\",\n                                                      \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"])\n\n\n    await solutions.forEach(answer => {\n      validAnswers.push(answer + \" :\")\n    })\n\n    console.log(this.state.answers)\n\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <header as='h1'>Boggle Game</header>\n          {this.state.state === false && <p>Valid Answers</p>}\n          {this.state.state === false && <p>{this.state.answers}</p>}\n          {this.state.state === true && <p>Correct Answers</p>}\n          {this.state.state === true && <p>{this.state.correct}</p>}\n          {this.state.state === false && <p>Your Correct Answers</p>}\n          {this.state.state === false && <p>{this.state.correct}</p>}\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n\n\n          {this.state.state === true && <Grid container justify=\"center\" spacing={100}>\n            {/* Row 1 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n\n              {Object.keys(gridItems1).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems1[rowKey].size}>\n                    {gridItems1[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n\n            {/* Row 2 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n              {Object.keys(gridItems2).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems2[rowKey].size}>\n                    {gridItems2[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n\n            {/* Row 3 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n              {Object.keys(gridItems3).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems3[rowKey].size}>\n                    {gridItems3[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </Grid>}\n\n\n          {/* <StartButton promptText=\"Start\" />\n          <StopButton promptText=\"Stop\" />\n          <TextInput promptText=\"Enter Word\" />   */}\n\n          {this.state.state === true && <Button variant=\"contained\" color=\"white\" prompt=\"Enter Word\" onClick={() => {\n            getUserInput(prompt, this.state.grids[0].grid, this.state.grids[0].dictionary,).then(function (result) {\n              console.log(\"Returned\");\n              console.log(result);\n              return result;\n            }).then((value) => {\n              if (!this.state.correct.includes(value + \" \") && (value != \"\")) {\n                this.state.correct.push(value + \" \")\n                this.setState({ correct: this.state.correct })\n                console.log(\"STATE:\" + this.state.correct)\n              } else if(value == \"\"){\n                alert(\"This word is not in the dictionary. Please enter another word\")\n              } else {\n                alert(\"You have already found this word. Please enter another word\")\n              }\n\n            })\n\n          }} >Enter Word</Button>}\n\n          <Button variant=\"contained\" color=\"primary\" onClick={() => {\n            console.log(\"Pressed\");\n            console.log(this.state.grids[0].grid)\n            this.setState({ state: true });\n          }}> Start </Button>\n\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => {\n            console.log(\"Pressed\");\n            this.setState({ state: false });\n          }}> Stop </Button>\n\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}