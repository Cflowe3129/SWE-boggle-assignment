{"ast":null,"code":"var _jsxFileName = \"/Users/cmaur/Desktop/Software Engineering/boggle-react-app/src/App.js\";\nimport React, { useState } from 'react';\nimport BoggleSolver from './Boggle Implementation/boggle_solver'; // import StartButton from './StartButton';\n// import StopButton from './StopButton';\n\nimport { Grid, Button, TextField, Input } from '@material-ui/core';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport TextInput from './AnswerInput';\nconst gridItems1 = {\n  0: {\n    size: 3,\n    label: \"O\"\n  },\n  1: {\n    size: 3,\n    label: \"I\"\n  },\n  2: {\n    size: 3,\n    label: \"H\"\n  }\n};\nconst gridItems2 = {\n  0: {\n    size: 3,\n    label: \"V\"\n  },\n  1: {\n    size: 3,\n    label: \"O\"\n  },\n  2: {\n    size: 3,\n    label: \"D\"\n  }\n};\nconst gridItems3 = {\n  0: {\n    size: 3,\n    label: \"U\"\n  },\n  1: {\n    size: 3,\n    label: \"S\"\n  },\n  2: {\n    size: 3,\n    label: \"O\"\n  }\n};\nvar validAnswers = [];\n\nconst findAllSolutions = require(\"./Boggle Implementation/boggle_solver\");\n\nasync function getUserInput(promptText, grid, dict) {\n  var value = \"\";\n  var trueGrid = []; // var grid = Array.from(grid);\n\n  console.log(grid.size);\n\n  for (i = 0; i < grid.size; i++) {\n    trueGrid.push(grid[i]);\n  }\n\n  cosnole.log(trueGrid);\n  const promptResoponse = prompt(promptText);\n  console.log(promptResoponse);\n  let solutions = findAllSolutions.findAllSolutions(trueGrid,\n  /* lines 44 - 48 are the dictionary*/\n  [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\", \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\", \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\", \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\", \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"]);\n  solutions.forEach(word => {\n    if (word === promptResoponse) {\n      console.log(\"true\");\n      value = promptResoponse;\n      console.log(value);\n    }\n  });\n  return value;\n}\n\nasync function setGrid() {}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startState: false,\n      answers: validAnswers,\n      word: '',\n      correct: [],\n      grids: []\n    };\n    this.ref = firebase.firestore();\n  }\n\n  async componentDidMount() {\n    this.unsubscribe = this.ref.collection('3x3').onSnapshot(querySnapshot => {\n      var gridArray = [];\n      querySnapshot.forEach(doc => {\n        gridArray.push({\n          grid: doc.data().grid,\n          dictionary: doc.data().dictionary,\n          size: doc.data().size\n        });\n      });\n      console.log(gridArray[0].grid);\n      this.setState({\n        grids: gridArray\n      });\n      this.unsubscribe();\n    });\n    let solutions = findAllSolutions.findAllSolutions(this.state.grids,\n    /* lines 77 - 81 are the dictionary*/\n    [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\", \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\", \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\", \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\", \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"]);\n    await solutions.forEach(answer => {\n      validAnswers.push(answer + \" :\");\n    });\n    console.log(this.state.answers);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      as: \"h1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, \"Boggle Game\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 42\n      }\n    }, \"Valid Answers\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 42\n      }\n    }, this.state.answers), this.state.state === true && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 41\n      }\n    }, \"Correct Answers\"), this.state.state === true && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 41\n      }\n    }, this.state.correct), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 42\n      }\n    }, \"Your Correct Answers\"), this.state.state === false && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 42\n      }\n    }, this.state.correct), this.state.state === true && /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems1).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems1[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 19\n        }\n      }, gridItems1[rowKey].label);\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems2).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems2[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 19\n        }\n      }, gridItems2[rowKey].label);\n    })), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      item: true,\n      xs: 12,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, Object.keys(gridItems3).map(rowKey => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: rowKey,\n        xs: gridItems3[rowKey].size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 19\n        }\n      }, gridItems3[rowKey].label);\n    }))), this.state.state === true && /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"white\",\n      prompt: \"Enter Word\",\n      onClick: () => {\n        getUserInput(prompt, this.state.grids[0], this.state.grids[0].dictionary).then(function (result) {\n          console.log(\"Returned\");\n          console.log(result);\n          return result;\n        }).then(value => {\n          if (!this.state.correct.includes(value + \" \") && value != \"\") {\n            this.state.correct.push(value + \" \");\n            this.setState({\n              correct: this.state.correct\n            });\n            console.log(\"STATE:\" + this.state.correct);\n          } else if (value == \"\") {\n            alert(\"This word is not in the dictionary. Please enter another word\");\n          } else {\n            alert(\"You have already found this word. Please enter another word\");\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 41\n      }\n    }, \"Enter Word\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => {\n        console.log(\"Pressed\");\n        console.log(this.state.grids.grid);\n        this.setState({\n          state: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, \" Start \"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => {\n        console.log(\"Pressed\");\n        this.setState({\n          state: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \" Stop \")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cmaur/Desktop/Software Engineering/boggle-react-app/src/App.js"],"names":["React","useState","BoggleSolver","Grid","Button","TextField","Input","firebase","TextInput","gridItems1","size","label","gridItems2","gridItems3","validAnswers","findAllSolutions","require","getUserInput","promptText","grid","dict","value","trueGrid","console","log","i","push","cosnole","promptResoponse","prompt","solutions","forEach","word","setGrid","App","Component","constructor","props","state","startState","answers","correct","grids","ref","firestore","componentDidMount","unsubscribe","collection","onSnapshot","querySnapshot","gridArray","doc","data","dictionary","setState","answer","render","Object","keys","map","rowKey","then","result","includes","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,uCAAzB,C,CACA;AACA;;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,QAA+C,mBAA/C;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,MAAMC,UAAU,GAAG;AACjB,KAAG;AAAEC,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GADc;AAEjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GAFc;AAGjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB;AAHc,CAAnB;AAMA,MAAMC,UAAU,GAAG;AACjB,KAAG;AAAEF,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GADc;AAEjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GAFc;AAGjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB;AAHc,CAAnB;AAMA,MAAME,UAAU,GAAG;AACjB,KAAG;AAAEH,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GADc;AAEjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GAFc;AAGjB,KAAG;AAAED,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB;AAHc,CAAnB;AAQA,IAAIG,YAAY,GAAG,EAAnB;;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,uCAAD,CAAhC;;AAGA,eAAeC,YAAf,CAA4BC,UAA5B,EAAwCC,IAAxC,EAA8CC,IAA9C,EAAqD;AAEnD,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,QAAQ,GAAG,EAAf,CAHmD,CAInD;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACT,IAAjB;;AAEA,OAAIe,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAEN,IAAI,CAACT,IAAnB,EAAyBe,CAAC,EAA1B,EAA8B;AAC5BH,IAAAA,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACM,CAAD,CAAlB;AACD;;AACDE,EAAAA,OAAO,CAACH,GAAR,CAAYF,QAAZ;AACA,QAAMM,eAAe,GAAGC,MAAM,CAACX,UAAD,CAA9B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYI,eAAZ;AAIA,MAAIE,SAAS,GAAGf,gBAAgB,CAACA,gBAAjB,CAAkCO,QAAlC;AAEhB;AAAkD,GAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,MAAtB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EACA,KADA,EACO,QADP,EACiB,KADjB,EACwB,MADxB,EACgC,MADhC,EACwC,MADxC,EACgD,KADhD,EAEA,KAFA,EAEO,OAFP,EAEgB,KAFhB,EAEuB,MAFvB,EAE+B,KAF/B,EAEsC,KAFtC,EAE6C,KAF7C,EAGA,MAHA,EAGQ,KAHR,EAGe,KAHf,EAGsB,KAHtB,EAG6B,KAH7B,EAGoC,KAHpC,EAG2C,QAH3C,EAIA,KAJA,EAIO,OAJP,EAIgB,KAJhB,EAIuB,KAJvB,EAI8B,OAJ9B,CAFlC,CAAhB;AAQAQ,EAAAA,SAAS,CAACC,OAAV,CAAkBC,IAAI,IAAI;AACxB,QAAIA,IAAI,KAAKJ,eAAb,EAA8B;AAC5BL,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAH,MAAAA,KAAK,GAAGO,eAAR;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;AACF,GAND;AAOA,SAAOA,KAAP;AACD;;AAED,eAAeY,OAAf,GAAyB,CAExB;;AACD,MAAMC,GAAN,SAAkBlC,KAAK,CAACmC,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,OAAO,EAAE1B,YAFE;AAGXkB,MAAAA,IAAI,EAAE,EAHK;AAIXS,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,KAAK,EAAE;AALI,KAAb;AAOA,SAAKC,GAAL,GAAWpC,QAAQ,CAACqC,SAAT,EAAX;AACD;;AAED,QAAMC,iBAAN,GAA0B;AAEzB,SAAKC,WAAL,GAAmB,KAAKH,GAAL,CAASI,UAAT,CAAoB,KAApB,EAA2BC,UAA3B,CAAuCC,aAAD,IAAmB;AAC1E,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,aAAa,CAAClB,OAAd,CAAuBoB,GAAD,IAAS;AAC7BD,QAAAA,SAAS,CAACxB,IAAV,CAAe;AACbP,UAAAA,IAAI,EAAEgC,GAAG,CAACC,IAAJ,GAAWjC,IADJ;AAEbkC,UAAAA,UAAU,EAAEF,GAAG,CAACC,IAAJ,GAAWC,UAFV;AAGb3C,UAAAA,IAAI,EAAEyC,GAAG,CAACC,IAAJ,GAAW1C;AAHJ,SAAf;AAKD,OAND;AAOAa,MAAAA,OAAO,CAACC,GAAR,CAAY0B,SAAS,CAAC,CAAD,CAAT,CAAa/B,IAAzB;AACA,WAAKmC,QAAL,CAAc;AACZZ,QAAAA,KAAK,EAAEQ;AADK,OAAd;AAIA,WAAKJ,WAAL;AACD,KAfkB,CAAnB;AAiBC,QAAIhB,SAAS,GAAGf,gBAAgB,CAACA,gBAAjB,CAAkC,KAAKuB,KAAL,CAAWI,KAA7C;AAEhB;AAAkD,KAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,MAAtB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EACA,KADA,EACO,QADP,EACiB,KADjB,EACwB,MADxB,EACgC,MADhC,EACwC,MADxC,EACgD,KADhD,EAEA,KAFA,EAEO,OAFP,EAEgB,KAFhB,EAEuB,MAFvB,EAE+B,KAF/B,EAEsC,KAFtC,EAE6C,KAF7C,EAGA,MAHA,EAGQ,KAHR,EAGe,KAHf,EAGsB,KAHtB,EAG6B,KAH7B,EAGoC,KAHpC,EAG2C,QAH3C,EAIA,KAJA,EAIO,OAJP,EAIgB,KAJhB,EAIuB,KAJvB,EAI8B,OAJ9B,CAFlC,CAAhB;AASA,UAAMZ,SAAS,CAACC,OAAV,CAAkBwB,MAAM,IAAI;AAChCzC,MAAAA,YAAY,CAACY,IAAb,CAAkB6B,MAAM,GAAG,IAA3B;AACD,KAFK,CAAN;AAIAhC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,KAAL,CAAWE,OAAvB;AAED;;AAKDgB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEG,KAAKlB,KAAL,CAAWA,KAAX,KAAqB,KAArB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFjC,EAGG,KAAKA,KAAL,CAAWA,KAAX,KAAqB,KAArB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKA,KAAL,CAAWE,OAAf,CAHjC,EAIG,KAAKF,KAAL,CAAWA,KAAX,KAAqB,IAArB,iBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJhC,EAKG,KAAKA,KAAL,CAAWA,KAAX,KAAqB,IAArB,iBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKA,KAAL,CAAWG,OAAf,CALhC,EAMG,KAAKH,KAAL,CAAWA,KAAX,KAAqB,KAArB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BANjC,EAOG,KAAKA,KAAL,CAAWA,KAAX,KAAqB,KAArB,iBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKA,KAAL,CAAWG,OAAf,CAPjC,EAoBG,KAAKH,KAAL,CAAWA,KAAX,KAAqB,IAArB,iBAA6B,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,OAAO,EAAE,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAE5B,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,IAAI,MAArC;AAAsC,MAAA,EAAE,EAAE,EAA1C;AAA8C,MAAA,OAAO,EAAE,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGmB,MAAM,CAACC,IAAP,CAAYjD,UAAZ,EAAwBkD,GAAxB,CAA6BC,MAAD,IAAY;AACvC,0BACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,GAAG,EAAEA,MAAhB;AAAwB,QAAA,EAAE,EAAEnD,UAAU,CAACmD,MAAD,CAAV,CAAmBlD,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,UAAU,CAACmD,MAAD,CAAV,CAAmBjD,KADtB,CADF;AAKD,KANA,CAFH,CAF4B,eAc5B,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,IAAI,MAArC;AAAsC,MAAA,EAAE,EAAE,EAA1C;AAA8C,MAAA,OAAO,EAAE,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG8C,MAAM,CAACC,IAAP,CAAY9C,UAAZ,EAAwB+C,GAAxB,CAA6BC,MAAD,IAAY;AACvC,0BACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,GAAG,EAAEA,MAAhB;AAAwB,QAAA,EAAE,EAAEhD,UAAU,CAACgD,MAAD,CAAV,CAAmBlD,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGE,UAAU,CAACgD,MAAD,CAAV,CAAmBjD,KADtB,CADF;AAKD,KANA,CADH,CAd4B,eAyB5B,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,IAAI,MAArC;AAAsC,MAAA,EAAE,EAAE,EAA1C;AAA8C,MAAA,OAAO,EAAE,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG8C,MAAM,CAACC,IAAP,CAAY7C,UAAZ,EAAwB8C,GAAxB,CAA6BC,MAAD,IAAY;AACvC,0BACE,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,GAAG,EAAEA,MAAhB;AAAwB,QAAA,EAAE,EAAE/C,UAAU,CAAC+C,MAAD,CAAV,CAAmBlD,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGG,UAAU,CAAC+C,MAAD,CAAV,CAAmBjD,KADtB,CADF;AAKD,KANA,CADH,CAzB4B,CApBhC,EA6DG,KAAK2B,KAAL,CAAWA,KAAX,KAAqB,IAArB,iBAA6B,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,OAAlC;AAA0C,MAAA,MAAM,EAAC,YAAjD;AAA8D,MAAA,OAAO,EAAE,MAAM;AACzGrB,QAAAA,YAAY,CAACY,MAAD,EAAS,KAAKS,KAAL,CAAWI,KAAX,CAAiB,CAAjB,CAAT,EAA8B,KAAKJ,KAAL,CAAWI,KAAX,CAAiB,CAAjB,EAAoBW,UAAlD,CAAZ,CAA2EQ,IAA3E,CAAgF,UAAUC,MAAV,EAAkB;AAChGvC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYsC,MAAZ;AACA,iBAAOA,MAAP;AACD,SAJD,EAIGD,IAJH,CAISxC,KAAD,IAAW;AACjB,cAAI,CAAC,KAAKiB,KAAL,CAAWG,OAAX,CAAmBsB,QAAnB,CAA4B1C,KAAK,GAAG,GAApC,CAAD,IAA8CA,KAAK,IAAI,EAA3D,EAAgE;AAC9D,iBAAKiB,KAAL,CAAWG,OAAX,CAAmBf,IAAnB,CAAwBL,KAAK,GAAG,GAAhC;AACA,iBAAKiC,QAAL,CAAc;AAAEb,cAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG;AAAtB,aAAd;AACAlB,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAW,KAAKc,KAAL,CAAWG,OAAlC;AACD,WAJD,MAIO,IAAGpB,KAAK,IAAI,EAAZ,EAAe;AACpB2C,YAAAA,KAAK,CAAC,+DAAD,CAAL;AACD,WAFM,MAEA;AACLA,YAAAA,KAAK,CAAC,6DAAD,CAAL;AACD;AAEF,SAfD;AAiBD,OAlB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7DhC,eAiFE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,OAAO,EAAE,MAAM;AACzDzC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,KAAL,CAAWI,KAAX,CAAiBvB,IAA7B;AACA,aAAKmC,QAAL,CAAc;AAAEhB,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAjFF,eAuFE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,WAAlC;AAA8C,MAAA,OAAO,EAAE,MAAM;AAC3Df,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,aAAK8B,QAAL,CAAc;AAAEhB,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvFF,CADF,CADF;AAiGD;;AAvJ+B;;AA2JlC,eAAeJ,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport BoggleSolver from './Boggle Implementation/boggle_solver';\n// import StartButton from './StartButton';\n// import StopButton from './StopButton';\nimport { Grid, Button, TextField, Input } from '@material-ui/core';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport TextInput from './AnswerInput';\n\nconst gridItems1 = {\n  0: { size: 3, label: \"O\" },\n  1: { size: 3, label: \"I\" },\n  2: { size: 3, label: \"H\" },\n}\n\nconst gridItems2 = {\n  0: { size: 3, label: \"V\" },\n  1: { size: 3, label: \"O\" },\n  2: { size: 3, label: \"D\" },\n}\n\nconst gridItems3 = {\n  0: { size: 3, label: \"U\" },\n  1: { size: 3, label: \"S\" },\n  2: { size: 3, label: \"O\" },\n}\n\n\n\nvar validAnswers = [];\n\nconst findAllSolutions = require(\"./Boggle Implementation/boggle_solver\");\n\n\nasync function getUserInput(promptText, grid, dict ) {\n\n  var value = \"\";\n  var trueGrid = [];\n  // var grid = Array.from(grid);\n  console.log(grid.size)\n\n  for(i = 0; i< grid.size; i++) {\n    trueGrid.push(grid[i]);\n  }\n  cosnole.log(trueGrid)\n  const promptResoponse = prompt(promptText)\n  console.log(promptResoponse);\n  \n\n  \n  let solutions = findAllSolutions.findAllSolutions(trueGrid,\n\n  /* lines 44 - 48 are the dictionary*/             [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\",\n                                                    \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\",\n                                                    \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\",\n                                                    \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\",\n                                                    \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"])\n\n  solutions.forEach(word => {\n    if (word === promptResoponse) {\n      console.log(\"true\")\n      value = promptResoponse;\n      console.log(value)\n    }\n  })\n  return value;\n}\n\nasync function setGrid() {\n\n}\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      startState: false,\n      answers: validAnswers,\n      word: '',\n      correct: [],\n      grids: [],\n    }\n    this.ref = firebase.firestore();\n  }\n\n  async componentDidMount() {\n    \n   this.unsubscribe = this.ref.collection('3x3').onSnapshot((querySnapshot) => {\n     var gridArray = [];\n     querySnapshot.forEach((doc) => {\n       gridArray.push({\n         grid: doc.data().grid,\n         dictionary: doc.data().dictionary,\n         size: doc.data().size,\n       })\n     })\n     console.log(gridArray[0].grid);\n     this.setState({\n       grids: gridArray,\n     })\n\n     this.unsubscribe();\n   })\n\n    let solutions = findAllSolutions.findAllSolutions(this.state.grids,\n\n    /* lines 77 - 81 are the dictionary*/             [\"div\", \"doo\", \"dso\", \"hods\", \"hood\", \"ids\", \"ods\",\n                                                      \"oos\", \"ovoids\", \"sou\", \"vids\", \"divs\", \"doos\", \"hid\",\n                                                      \"hoi\", \"hoods\", \"ios\", \"odso\", \"ous\", \"sod\", \"sov\",\n                                                      \"void\", \"doh\", \"dos\", \"hod\", \"hoo\", \"hos\", \"odious\",\n                                                      \"ooh\", \"ovoid\", \"soh\", \"vid\", \"voids\"])\n\n\n    await solutions.forEach(answer => {\n      validAnswers.push(answer + \" :\")\n    })\n\n    console.log(this.state.answers)\n\n  }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <header as='h1'>Boggle Game</header>\n          {this.state.state === false && <p>Valid Answers</p>}\n          {this.state.state === false && <p>{this.state.answers}</p>}\n          {this.state.state === true && <p>Correct Answers</p>}\n          {this.state.state === true && <p>{this.state.correct}</p>}\n          {this.state.state === false && <p>Your Correct Answers</p>}\n          {this.state.state === false && <p>{this.state.correct}</p>}\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n\n\n          {this.state.state === true && <Grid container justify=\"center\" spacing={100}>\n            {/* Row 1 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n\n              {Object.keys(gridItems1).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems1[rowKey].size}>\n                    {gridItems1[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n\n            {/* Row 2 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n              {Object.keys(gridItems2).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems2[rowKey].size}>\n                    {gridItems2[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n\n            {/* Row 3 */}\n            <Grid container justify=\"center\" item xs={12} spacing={3}>\n              {Object.keys(gridItems3).map((rowKey) => {\n                return (\n                  <Grid item key={rowKey} xs={gridItems3[rowKey].size}>\n                    {gridItems3[rowKey].label}\n                  </Grid>\n                );\n              })}\n            </Grid>\n          </Grid>}\n\n\n          {/* <StartButton promptText=\"Start\" />\n          <StopButton promptText=\"Stop\" />\n          <TextInput promptText=\"Enter Word\" />   */}\n\n          {this.state.state === true && <Button variant=\"contained\" color=\"white\" prompt=\"Enter Word\" onClick={() => {\n            getUserInput(prompt, this.state.grids[0], this.state.grids[0].dictionary,).then(function (result) {\n              console.log(\"Returned\");\n              console.log(result);\n              return result;\n            }).then((value) => {\n              if (!this.state.correct.includes(value + \" \") && (value != \"\")) {\n                this.state.correct.push(value + \" \")\n                this.setState({ correct: this.state.correct })\n                console.log(\"STATE:\" + this.state.correct)\n              } else if(value == \"\"){\n                alert(\"This word is not in the dictionary. Please enter another word\")\n              } else {\n                alert(\"You have already found this word. Please enter another word\")\n              }\n\n            })\n\n          }} >Enter Word</Button>}\n\n          <Button variant=\"contained\" color=\"primary\" onClick={() => {\n            console.log(\"Pressed\");\n            console.log(this.state.grids.grid)\n            this.setState({ state: true });\n          }}> Start </Button>\n\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => {\n            console.log(\"Pressed\");\n            this.setState({ state: false });\n          }}> Stop </Button>\n\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}